#!/usr/bin/env ruby

refname = ARGV[0]
oldrev  = ARGV[1]
newrev  = ARGV[2]
user    = ENV['USER']

puts "Enforcing Policies... \n(#{refname}) (#{oldrev[0,6]}) (#{newrev[0,6]})"

$regex = /\[[A-Z]*-{1}[0-9]*\]:.*/
$empty_regex = /^0+$/
$branch_naming_regex = /refs\/heads\/feature-{1}.*|bugfix-{1}MRS-{1}[0-9]*/

def check_branch_name(refname)
	if !$branch_naming_regex.match(refname)
		puts "[POLICY]: #{refname} goes against the branch naming convention"
		exit 1
	end
end

def get_rev_list(refname,oldrev,newrev)
	if $empty_regex.match(oldrev)
		check_branch_name(refname)
		return `git rev-list #{newrev}..#{newrev}`.split("\n")
	elsif $empty_regex.match(newrev)
		return `git rev-list #{oldrev}..#{oldrev}`.split("\n")
	else
		return `git rev-list #{oldrev}..#{newrev}`.split("\n")
	end
end

# enforced custom commit message format
def check_message_format(refname,oldrev,newrev)
  missed_revs = get_rev_list(refname,oldrev,newrev)
  missed_revs.each do |rev|
    message = `git cat-file commit #{rev} | sed '1,/^$/d'`
    if !$regex.match(message)
  		puts "[POLICY] Your message is not formatted correctly"
  		puts message
  		exit 1
  	end
  end
end

check_message_format(refname,oldrev,newrev)