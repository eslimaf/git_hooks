#!/usr/bin/env python
import sys
import re
import subprocess,shlex

refname = sys.argv[1]
oldrev = sys.argv[2]
newrev = sys.argv[3]

print refname
print oldrev
print newrev

# Conventions helps
branch_convention_help = "{feature|bugfix}_{CR} ex: feature_mrs-893"
comment_convention_help = "[ID-{NUMBER}]: {Descriptive comment}"

revision_empty_checker = re.compile(r"^0+$")
commit_message_checker = re.compile(r"\[[A-Z]*-{1}[0-9]*\]:.*")
branch_name_checker = re.compile(r"refs\/heads\/feature_{1}.*|bugfix_{1}MRS-{1}[0-9]*")

def get_rev_list():
	sha_range = ""
	if revision_empty_checker.match(oldrev):
		sha_range = newrev+".."+newrev		
	elif revision_empty_checker.match(newrev):
		sha_range = oldrev+".."+oldrev
	else:
		sha_range = oldrev+".."+newrev

	print sha_range

	revisions = subprocess.check_output(["git","rev-list",sha_range]).split();
	print revisions
	return revisions;

def check_branch_naming_convention():
	if not branch_name_checker.match(revname):
		print '[POLICY]: Branch naming convention'
		print '[ERROR]:  "{}" does not match the defined naming convention'.format(revname)
		print '[CONVENTION]: {}'.format(branch_convention_help)
		exit(1)
	return;

def check_commit_message():
	missed_revs = get_rev_list()

  	for rev in missed_revs:
  	    cmd = "git cat-file commit %s" %(rev)
	    p1 = subprocess.Popen(shlex.split(cmd), stdout=subprocess.PIPE)
	    p2 = subprocess.Popen(shlex.split("sed '1,/^$/d'"),stdin=p1.stdout,stdout=subprocess.PIPE)
	    p1.stdout.close()
	    message = p2.communicate()[0]
	    if not commit_message_checker.match(message.strip()):
	  		print "[POLICY] Your message is not formatted correctly"
			print '[ERROR]:  "{}" does not match the defined comment convention'.format(message.strip())
			print '[CONVENTION]: {}'.format(comment_convention_help)
	  		exit(1)
	return;

def main():
	#check if is a branch creation
	if revision_empty_checker.match(oldrev):
		print "New branch creation, checking naming convention"
		check_branch_naming_convention();

	if not revision_empty_checker.match(newrev):
		#check commit message convention
		check_commit_message();
	else:
		print "Deleting a branch"
	
	return;

main();